// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa simple sample": Application Contexts
//
// Command:
// $ goagen
// --design=design
// --out=$(GOPATH)\goa-sample
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// IDActionsContext provides the actions ID action context.
type IDActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewIDActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller ID action.
func NewIDActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*IDActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IDActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IDActionsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *IDActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IDActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// HelloActionsContext provides the actions hello action context.
type HelloActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name string
}

// NewHelloActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller hello action.
func NewHelloActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*HelloActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HelloActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HelloActionsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HelloActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// PingActionsContext provides the actions ping action context.
type PingActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller ping action.
func NewPingActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingActionsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PingActionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
